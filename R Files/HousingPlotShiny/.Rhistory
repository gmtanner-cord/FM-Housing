runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
na.omit(FM_Housing_Clean$`Year Built`)
which(na.omit(FM_Housing_Clean$`Year Built`))
which(is.na(FM_Housing_Clean$`Year Built`))
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
is.recursive(FM_Housing_Clean)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
median(na.omit(FM_Housing_Clean$`Year Built`))
max(na.omit(FM_Housing_Clean$`Year Built`))
median(FM_Housing_Clean$`Year Built`))
median(FM_Housing_Clean$`Year Built`)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
median(na.omit(FM_Housing_Clean$`Year Built`))
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
df
df <- FM_Housing_Clean %>% filter(`Year Built` %in% input$year)
years <- as.numeric(rownames(FM_Housing_Clean))
years
years <- as.numeric(rownames(FM_Housing_Clean$`Year Built`))
years <- as.numeric((FM_Housing_Clean$`Year Built`))
years
years <- as.numeric((na.omit(FM_Housing_Clean$`Year Built`)))
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
typeof(years)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
typeof(years)
years <- as.integer((na.omit(FM_Housing_Clean$`Year Built`)))
typeof(years)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
typeof(years)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
FM_Housing_Clean[as.integer(input$years)
FM_Housing_Clean[as.integer(input$years),]
FM_Housing_Clean[as.integer(input$years),]
library(shiny)
years <- as.integer((na.omit(FM_Housing_Clean$`Year Built`)))
years
# Define server logic required to plot house types
shinyServer(function(input, output) {
output$result <- renderText({
paste("You chose", input$type)
})
chosendata <- reactive({
req(input$type)
df <- FM_Housing_Clean %>% filter(`Book Section` %in% input$type)
})
pointdata <- reactive({
req(input$bedrooms)
df <- FM_Housing_Clean %>% filter(`Total Bedrooms` %in% input$bedrooms) %>%
group_by(median(`Sold Price`),`City`) %>% summarize(median_Sold_Price =median(`Sold Price`))
})
# geodata <- reactive({
#     req(input$year)
#     df <- FM_Housing_Clean %>% filter(`Year Built` %in% input$year)
#
#
# })
output$geom_bar <- renderPlot({
# generate book section type from input$section from ui.R
# type    <- FM_Housing_Clean[`Book Section`]
# section <- seq(min(bins), max(bins), length.out = input$section + 1)
# draw the bar with the specified number of bins
ggplot(chosendata()) + geom_bar(mapping = aes(x=`Book Section`))
})
output$geom_point <- renderPlot({
ggplot(pointdata()) + geom_point(mapping = aes(y = median_Sold_Price, x= `City`))
})
output$geom_year <- renderPlot({
ggplot(geodata()) + geom_point(mapping = aes(y = `Geo Lat`, x = `Geo Lon`))
})
output$yearPlot <- renderPlot({
# Render a barplot
barplot(FM_Housing_Clean[as.integer(input$years),]*1000,
main=paste("Phones in", input$year),
ylab="Number of Telephones",
xlab="Region",
ylim=c(0,max(years)*1000))
})
# # Show the values in an HTML table ----
# output$values <- renderTable({
#     sliderValues()
# })
})
years <- as.integer((na.omit(FM_Housing_Clean$`Year Built`)))
years
# rsconnect::deployApp('C:\\Users\\13204\\Documents\\GitHub\\FM-Housing\\R Files\\HousingPlotShiny')
library(rsconnect)
library(shiny)
#FM_Housing_Clean <- na.omit(FM_Housing_Clean[`Year Built`]
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Book Section"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Select type of trend to plot
selectInput(inputId = "type", label = strong("Choose Book Section"),
choices = unique(FM_Housing_Clean$`Book Section`),
selected = "Single Family Residence")
),
# sidebarPanel(
checkboxGroupInput(inputId = "bedrooms", label = strong("Choose # Bedrooms"),
choices = unique(FM_Housing_Clean$`Total Bedrooms`),
selected = "3"
)
,
sliderInput(inputId = "year", label =strong("Choose Year Built"),
"year", "Year:",
min = min(years), max = max(years),
value = median(years)
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("geom_bar"),
textOutput("result"),
plotOutput("geom_point"),
plotOutput("yearPlot")
)
)
)
min(years)
median(years)
max(years)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
FM_Housing_Clean[as.integer(input$years),]
library(shiny)
years <- as.integer((na.omit(FM_Housing_Clean$`Year Built`)))
years
# Define server logic required to plot house types
shinyServer(function(input, output) {
output$result <- renderText({
paste("You chose", input$type)
})
chosendata <- reactive({
req(input$type)
df <- FM_Housing_Clean %>% filter(`Book Section` %in% input$type)
})
pointdata <- reactive({
req(input$bedrooms)
df <- FM_Housing_Clean %>% filter(`Total Bedrooms` %in% input$bedrooms) %>%
group_by(median(`Sold Price`),`City`) %>% summarize(median_Sold_Price =median(`Sold Price`))
})
# geodata <- reactive({
#     req(input$year)
#     df <- FM_Housing_Clean %>% filter(`Year Built` %in% input$year)
#
#
# })
output$geom_bar <- renderPlot({
# generate book section type from input$section from ui.R
# type    <- FM_Housing_Clean[`Book Section`]
# section <- seq(min(bins), max(bins), length.out = input$section + 1)
# draw the bar with the specified number of bins
ggplot(chosendata()) + geom_bar(mapping = aes(x=`Book Section`))
})
output$geom_point <- renderPlot({
ggplot(pointdata()) + geom_point(mapping = aes(y = median_Sold_Price, x= `City`))
})
output$geom_year <- renderPlot({
ggplot(geodata()) + geom_point(mapping = aes(y = `Geo Lat`, x = `Geo Lon`))
})
output$yearPlot <- renderPlot({
# Render a barplot
barplot(FM_Housing_Clean[as.integer(input$years),]*1000,
main=paste("Phones in", input$year),
ylab="Number of Telephones",
xlab="Region",
ylim=c(0,max(years)*1000))
})
# # Show the values in an HTML table ----
# output$values <- renderTable({
#     sliderValues()
# })
})
barplot(FM_Housing_Clean[as.integer(input$years),]*1000,
main=paste("Phones in", input$year),
ylab="Number of Telephones",
xlab="Region",
ylim=c(0,max(years)*1000))
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(caret)
library(rvest)
library(lme4)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_factor()
))
FM_Labor_Raw <- read_excel("../Data/FM_Labor_Raw.xlsx")
FM_Income_Raw <- read_excel("../Data/FM_Income_Raw.xlsx")
FM_Tract_Raw <- read_excel("../Data/tract_total.xlsx")
FM_Housing_Clean <- FM_Housing_Raw[!is.na(FM_Housing_Raw$`Geo Lon`) & !is.na(FM_Housing_Raw$`Geo Lat`),]
FM_Housing_Clean <- FM_Housing_Clean %>% cbind(FM_Tract_Raw$tractvec) %>% rename("Census Tract"=`FM_Tract_Raw$tractvec`)
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean$`Total SqFt.`[FM_Housing_Clean$`Total SqFt.` < 150] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Period" = floor_date(`Start Date`, "month"))
Features <- str_match_all(FM_Housing_Clean$Features, "([^\\|]*)\\|([^\\|]*)\\|([^;]*);")
for(i in 1:length(Features)) {
Features[[i]] <- Features[[i]][,2:4] %>% cbind(i)
}
Features_Clean <- as.data.frame(do.call(rbind, Features)) %>% rename("Index" = i)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Index"=factor(1:nrow(FM_Housing_Clean)))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Air Conditioning") %>% select("Index", V2)) %>% rename("Air Conditioning"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Foundation") %>% select("Index", V2)) %>% rename("Foundation"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Exterior") %>% select("Index", V2)) %>% rename("Exterior"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="New Construction") %>% select("Index", V3)) %>% rename("New Construction Type"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Roof") %>% select("Index", V2)) %>% rename("Roof"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Water Heater") %>% select("Index", V2)) %>% rename("Water Heater"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Kitchen Island") %>% select("Index", V3)) %>% rename("Kitchen Island"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Patio") %>% select("Index", V3)) %>% rename("Patio"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Wood Deck"|V2=="Maint. Free Deck") %>% select("Index", V2)) %>% rename("Deck"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Fenced Partial"|V2=="Fenced Full") %>% select("Index", V2)) %>% rename("Fence"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pool") %>% select("Index", V3)) %>% rename("Pool"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Sprinkler System") %>% select("Index", V3)) %>% rename("Sprinkler System"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Gazebo") %>% select("Index", V3)) %>% rename("Gazebo"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Dock") %>% select("Index", V3)) %>% rename("Dock"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pantry") %>% select("Index", V3)) %>% rename("Pantry"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Walk-in Closet") %>% select("Index", V3)) %>% rename("Walk-in Closet"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Private Bath") %>% select("Index", V3)) %>% rename("Private Bath"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% replace_na(list(
"Air Conditioning"="None",
"Foundation"="Other",
"Exterior"="Other",
"New Construction Type"="No",
"Roof"="Other",
"Water Heater"="Other",
"Kitchen Island"="No",
"Patio"="No",
"Deck"="None",
"Fence"="None",
"Pool"="No",
"Sprinkler System"="No",
"Gazebo"="No",
"Dock"="No",
"Pantry"="No",
"Walk-in Closet"="No",
"Private Bath"="No"
))
FM_Housing_Clean <- droplevels(FM_Housing_Clean)
FM_Agg_Monthly <- FM_Labor_Raw %>% mutate(Period=as.Date(paste(Year, Period, "01", sep="-"), "%Y-%b-%d"))
FM_Agg_Monthly <- left_join(FM_Agg_Monthly, FM_Income_Raw)
FM_Agg_Monthly <- FM_Agg_Monthly %>% select(-c(Year, employment, unemployment)) %>% mutate_at(vars(`labor force`,`unemployment rate`), parse_number)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate <= `Pended Date`)))
}
getHousesSoldMonthly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getHousesSoldYearly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - years(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getMedianMarketPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate - months(1) <= `Pended Date`) %>% pull(`List Price`) %>% median())
}
getMedianSoldPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sold Price`) %>% median())
}
getMedianSaleToListMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sale to List Ratio`) %>% mean())
}
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses on Market" = if_else(`Period` >= as.Date("2001-01-01"), getHousesOnMarket(Period), as.integer(500)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses Sold in Period" = if_else(`Period` >= as.Date("2001-01-01"), getHousesSoldMonthly(Period), as.integer(200)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Sales Rate over past Year" = if_else(`Period` >= as.Date("2002-01-01"), getHousesSoldYearly(Period)/12, 200))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Months Remaining Inventory" = `Houses on Market` / `Houses Sold in Period`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Seasonally-corrected MRI" = `Houses on Market` / `Sales Rate over past Year`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Market Price in Period" = getMedianMarketPriceMonthly(Period))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Sold Price in Period" = if_else(`Period` >= as.Date("2001-01-01"), getMedianSoldPriceMonthly(Period), 100000))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Monthly Payment on Median Home Sold in Period"=`Median Sold Price in Period`*.8*(0.01*`Effective Interest Rate`/12)/(1-(1/(1+0.01*`Effective Interest Rate`/12)^360)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Qualifying Income for Median Home Sold in Period"=`Monthly Payment on Median Home Sold in Period`*4*12)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Affordability Index"=(`Median Income`/`Qualifying Income for Median Home Sold in Period`)*100)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Unemployment-adjusted Affordability Index"=`Affordability Index`*(1-0.01*`unemployment rate`))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(FM_Agg_Monthly, by=c("List Period"="Period"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Air Conditioning"=if_else(`Air Conditioning`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("New Construction"=if_else(`New Construction Type`=="No", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise %>% mutate("Style Group"=switch(`Style`,
"1 Story" = "1 Story",
"1 1/2 Stor" = "1.5 Story",
"2 Story" = "2+ Story",
"3 Story" = "2+ Story",
"3 Level" = "Split Level",
"4 Level" = "Split Level",
"Bi Level" = "Bi-Level",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Roof Group"=if_else(`Roof` %in% c("Shingle", "Architectural Shingle"), as.character(`Roof`), "Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Book Section Group"=switch(`Book Section`,
"Condominium" = "Group Residence",
"Duplex" = "Group Residence",
"Lake Property" = "Single Family Residence",
"Single Family Residence" = "Single Family Residence",
"Townhouse" = "Townhouse/Twinhome",
"Twinhomes" = "Townhouse/Twinhome",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Water Heater Group"=if_else(`Water Heater`=="Gas", "Gas", "Electric/Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Fence"=if_else(`Fence`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Deck"=if_else(`Deck`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Real Sold Price"=`Sold Price`*261.560/`CPI`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log Price"=log(`Real Sold Price`))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log SqFt"=log(`Total SqFt.`))
n <- 20
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
#scaling <- preProcess(FM_Housing_Train, method=c("center","scale"))
#trainScaled <- scaling %>% predict(FM_Housing_Train)
housingLinear <- lmer(`Log Price`~
`Log SqFt`+
`Year Built`+
#`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Seasonally-corrected MRI`+
`Style Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
#`Gazebo`+
#`Dock`+
#`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
#(1|`Book Section Group`/`Census Tract`),
#(1|`Census Tract`/`Book Section Group`),
(1|`Census Tract`) + (1|`Book Section`),
data=FM_Housing_Train, REML=FALSE)
#testScaled <- scaling %>% predict(FM_Housing_Test)
testedModel <- predict(housingLinear, newdata=FM_Housing_Test, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Log Price`)[2]
}
shiny::runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
View(FM_Housing_Clean)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
minprice
input$minprice
geom_price
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp()
runApp()
runApp()
runApp()
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp()
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
install.packages("profvis", dependencies = FALSE)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
app_idle_timeout
app_idle_timeout()
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
load("C:/Users/13204/Downloads/assessed_profs.rdata")
View(trainIndex)
View(assessed_profs)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp()
runApp()
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
install.packages("plotly", dependencies = FALSE)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
install.packages("lazyeval", dependencies = FALSE)
runApp()
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
install.packages("crosstalk", dependencies = FALSE)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
df <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10), z=c('a','b','c','d','e'))
library(ggplot2)
# Define the content and format of the tooltip in the "text" aesthetic
p <- ggplot(df, aes(x=x, y=y,
text=paste("X=",x,"<br>Y=",y,"<br>Z=",z))) +
geom_point()
library(plotly)
p <- ggplotly(p, tooltip="text")
print(p)
df <- data.frame(x=c(1,2,3,4,5), y=c(6,7,8,9,10), z=c('a','b','c','d','e'))
library(ggplot2)
# Define the content and format of the tooltip in the "text" aesthetic
p <- ggplot(df, aes(x=x, y=y,
text=paste("X=",x,"<br>Y=",y,"<br>Z=",z))) +
geom_point()
library(plotly)
p <- ggplotly(p, tooltip="text")
print(p)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
View(p)
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
shiny::runApp('GitHub/FM-Housing/R Files/HousingPlotShiny')
