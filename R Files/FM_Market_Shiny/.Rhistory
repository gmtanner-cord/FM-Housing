`Building Age`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation Group`+
`Book Section Group`+
`Exterior`+
(1+`Log SqFt`|`Census Tract`), data=FM_Housing_Train, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=FM_Housing_Test, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=FM_Housing_Test_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Price Diff`)[2]
resamples_recent[i] <- postResample(testedModel_recent, FM_Housing_Test_recent$`Price Diff`)[2]
print(i)
}
summary(trainingModel)
paste("Full range: ", mean(resamples), " (", sd(resamples), ")", sep="")
paste("2021 only: ", mean(resamples_recent), " (", sd(resamples_recent), ")", sep="")
FM_Housing_Train$prediction <- predict(trainingModel)
ggplot(FM_Housing_Clean) + geom_point(aes(`List Price`, `Price Diff`), alpha=0.1)
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
minlon <- min(FM_Market_Clean$`Geo Lon`)
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?JS
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?fixedPanel
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?makeAwesomeIcon
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?makeIcon
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?makeAwesomeIcon
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp()
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
?fitBounds
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
shiny::runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
runApp('GitHub/FM-Housing/R Files/FM_Market_Shiny')
library(lme4)
load("hedonicModel.RData")
shiny::runApp()
FM_Housing_Clean <- read_csv("../Data/FM_Housing_Clean.csv.gz", col_types = cols(
`Lease Term` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_character(),
`Address #` = col_character(),
`Occupant Phone 2` = col_character(),
`Finance` = col_character(),
`Sheyenne Unpd` = col_character()
))
library(tidyverse)
library(lme4)
library(caret)
library(lubridate)
#TEST PROCESSING
#Anything finalized should be put in DataProcessing.Rmd
FM_Housing_Clean[FM_Housing_Clean$`Roof`=="Slate",]$`Roof` <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=exp(-0.002*`Days Since Listing`))
n <- 2
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
FM_Housing_Test_recent <- FM_Housing_Test %>% filter(`Pended Date` >= as.Date("2021-01-01"))
trainingModel <- lmer(`Log Price`~
`Log SqFt`+
`Year Built`+
`Building Age`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style`+
`Roof`+
`Water Heater`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation`+
`Book Section`+
`Exterior`+
(1+`Log SqFt`|`City`), data=FM_Housing_Train, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=FM_Housing_Test, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=FM_Housing_Test_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Log Price`)[2]
resamples_recent[i] <- postResample(testedModel_recent, FM_Housing_Test_recent$`Log Price`)[2]
print(i)
}
summary(trainingModel)
paste("Full range: ", mean(resamples), " (", sd(resamples), ")", sep="")
paste("2021 only: ", mean(resamples_recent), " (", sd(resamples_recent), ")", sep="")
ggplot() + geom_point(aes(predict(trainingModel), resid(trainingModel)), alpha=0.1) + geom_hline(yintercept=0, color="blue")
hedonicModel <- trainingModel
save(hedonicModel, file="FM_Market_Shiny/hedonicModel.RData")
shiny::runApp()
runApp()
FM_Housing_Clean <- read_csv("../FM_Housing_Clean.csv.gz")
read_csv("../../Data/FM_Housing_Clean.csv.gz")
write_csv(FM_Housing_Clean %>% filter(FALSE), "prediction_frame.csv")
FM_Housing_Clean <- read_csv("../Data/FM_Housing_Clean.csv.gz", col_types = cols(
`Lease Term` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_character(),
`Address #` = col_character(),
`Occupant Phone 2` = col_character(),
`Finance` = col_character(),
`Sheyenne Unpd` = col_character()
))
empty <- FM_Housing_Clean %>% filter(FALSE)
FM_Housing_Clean %>% mutate("Model Weights")
empty <- empty %>% mutate("Model Weights")
empty[1,] <- NA
write_csv(empty, "Predicted_DF.csv")
Predicted_DF <- read_csv("Predicted_DF.csv")
runApp()
runApp()
runApp()
runApp()
View(empty)
View(FM_Housing_Clean)
runApp()
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=exp(-0.002*`Days Since Listing`))
n <- 2
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
library(tidyverse)
library(lme4)
library(caret)
library(lubridate)
FM_Housing_Clean <- read_csv("../Data/FM_Housing_Clean.csv.gz", col_types = cols(
`Lease Term` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_character(),
`Address #` = col_character(),
`Occupant Phone 2` = col_character(),
`Finance` = col_character(),
`Sheyenne Unpd` = col_character()
))
#TEST PROCESSING
#Anything finalized should be put in DataProcessing.Rmd
FM_Housing_Clean[FM_Housing_Clean$`Roof`=="Slate",]$`Roof` <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=exp(-0.002*`Days Since Listing`))
n <- 2
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
FM_Housing_Test_recent <- FM_Housing_Test %>% filter(`Pended Date` >= as.Date("2021-01-01"))
trainingModel <- lmer(`Log Price`~
`Log SqFt`+
`Year Built`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style`+
`Roof`+
`Water Heater`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation`+
`Book Section`+
`Exterior`+
(1+`Log SqFt`|`City`), data=FM_Housing_Train, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=FM_Housing_Test, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=FM_Housing_Test_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Log Price`)[2]
resamples_recent[i] <- postResample(testedModel_recent, FM_Housing_Test_recent$`Log Price`)[2]
print(i)
}
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=exp(-0.002*`Days Since Listing`))
n <- 2
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
FM_Housing_Test_recent <- FM_Housing_Test %>% filter(`Pended Date` >= as.Date("2021-01-01"))
trainingModel <- lmer(`Log Price`~
`Log SqFt`+
`Year Built`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style`+
`Roof`+
`Water Heater`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation`+
`Book Section`+
`Exterior`+
(1+`Log SqFt`|`City`), data=FM_Housing_Train, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=FM_Housing_Test, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=FM_Housing_Test_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Log Price`)[2]
resamples_recent[i] <- postResample(testedModel_recent, FM_Housing_Test_recent$`Log Price`)[2]
print(i)
}
summary(trainingModel)
paste("Full range: ", mean(resamples), " (", sd(resamples), ")", sep="")
paste("2021 only: ", mean(resamples_recent), " (", sd(resamples_recent), ")", sep="")
ggplot() + geom_point(aes(predict(trainingModel), resid(trainingModel)), alpha=0.1) + geom_hline(yintercept=0, color="blue")
hedonicModel <- trainingModel
save(hedonicModel, file="FM_Market_Shiny/hedonicModel.RData")
runApp()
runApp()
runApp()
runApp()
