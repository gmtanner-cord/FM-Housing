`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Seasonally-adjusted MRI`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Seasonally-corrected MRI`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`+
`Seasonally-corrected MRI,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`+
`Seasonally-corrected MRI`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Dock`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
n <- 100
resamples <- vector(length=n)
for(i in 1:n) {
trainIndex <- createDataPartition(FM_Housing_Clean$`Sold Price`, p=0.8, list=FALSE)
FM_Housing_Train <- FM_Housing_Clean[trainIndex,]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex,]
housingLinear <- lm(log(`Sold Price`)~
`Total SqFt.`+
`Year Built`+
`Start Date`+
`Total Bedrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Unemployment-adjusted Affordability Index`+
`Style Group`+
`Book Section Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Months Remaining Inventory`,
data=FM_Housing_Train)
testedModel <- housingLinear %>% predict(FM_Housing_Test)
resamples[i] <- postResample(testedModel, FM_Housing_Test$`Sold Price`)[2]
}
summary(housingLinear)
mean(resamples)
sd(resamples)
#ggplot() + geom_point(mapping=aes(x=predict(housingLinear), y=resid(housingLinear)), alpha=0.25, size=0.75)
ggplot(FM_Housing_Clean) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`))
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`))
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`, color="red"))
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`), color="red")
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`), color="red") _ geom_line(mapping=aes(x=`Period`, y=`Seasonally-adjusted Months Remaining Inventory`))
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=`Affordability Index`), color="red") + geom_line(mapping=aes(x=`Period`, y=`Seasonally-corrected MRI`))
ggplot(FM_Agg_Monthly) + geom_line(mapping=aes(x=`Period`, y=scale(`Affordability Index`, center=TRUE, scale=TRUE)), color="red") + geom_line(mapping=aes(x=`Period`, y=scale(`Seasonally-corrected MRI`, center=TRUE, scale=TRUE)))
View(FM_Agg_Monthly)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(caret)
library(rvest)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_factor()
))
FM_Labor_Raw <- read_excel("../Data/FM_Labor_Raw.xlsx")
FM_Income_Raw <- read_excel("../Data/FM_Income_Raw.xlsx")
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean$`Total SqFt.`[FM_Housing_Clean$`Total SqFt.` < 150] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Period" = floor_date(`Start Date`, "month"))
Features <- str_match_all(FM_Housing_Clean$Features, "([^\\|]*)\\|([^\\|]*)\\|([^;]*);")
for(i in 1:length(Features)) {
Features[[i]] <- Features[[i]][,2:4] %>% cbind(i)
}
Features_Clean <- as.data.frame(do.call(rbind, Features)) %>% rename("Index" = i)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Index"=factor(1:nrow(FM_Housing_Clean)))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Air Conditioning") %>% select("Index", V2)) %>% rename("Air Conditioning"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Foundation") %>% select("Index", V2)) %>% rename("Foundation"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Exterior") %>% select("Index", V2)) %>% rename("Exterior"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="New Construction") %>% select("Index", V3)) %>% rename("New Construction Type"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Roof") %>% select("Index", V2)) %>% rename("Roof"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Water Heater") %>% select("Index", V2)) %>% rename("Water Heater"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Kitchen Island") %>% select("Index", V3)) %>% rename("Kitchen Island"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Patio") %>% select("Index", V3)) %>% rename("Patio"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Wood Deck"|V2=="Maint. Free Deck") %>% select("Index", V2)) %>% rename("Deck"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Fenced Partial"|V2=="Fenced Full") %>% select("Index", V2)) %>% rename("Fence"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pool") %>% select("Index", V3)) %>% rename("Pool"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Sprinkler System") %>% select("Index", V3)) %>% rename("Sprinkler System"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Gazebo") %>% select("Index", V3)) %>% rename("Gazebo"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Dock") %>% select("Index", V3)) %>% rename("Dock"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pantry") %>% select("Index", V3)) %>% rename("Pantry"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Walk-in Closet") %>% select("Index", V3)) %>% rename("Walk-in Closet"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Private Bath") %>% select("Index", V3)) %>% rename("Private Bath"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% replace_na(list(
"Air Conditioning"="None",
"Foundation"="Other",
"Exterior"="Other",
"New Construction Type"="No",
"Roof"="Other",
"Water Heater"="Other",
"Kitchen Island"="No",
"Patio"="No",
"Deck"="None",
"Fence"="None",
"Pool"="No",
"Sprinkler System"="No",
"Gazebo"="No",
"Dock"="No",
"Pantry"="No",
"Walk-in Closet"="No",
"Private Bath"="No"
))
FM_Housing_Clean <- droplevels(FM_Housing_Clean)
Features_Clean %>% distinct(V1)
Features_Clean %>% filter(V1=="Garage") %>% distinct(V2)
Features_Clean %>% filter(V1=="Inclusions") %>% distinct(V2)
Features_Clean %>% filter(V1=="Miscellaneous") %>% distinct(V2)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(caret)
library(rvest)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_factor()
))
FM_Labor_Raw <- read_excel("../Data/FM_Labor_Raw.xlsx")
FM_Income_Raw <- read_excel("../Data/FM_Income_Raw.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(magrittr)
library(stringi)
FM_Housing_Raw <- read_csv(unz("FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
latlonhead <- FM_Housing_Raw %>% select(`Geo Lon`, `Geo Lat`) %>% na.omit(latlonhead)
#latlonhead <- latlonhead %>% tail(50000)
tractvec <- vector(length = nrow(latlonhead))
for(i in 49800:nrow(latlonhead)) {
lon <- toString(latlonhead[i,1])
lat <- toString(latlonhead[i,2])
latlon <- read_html(paste0("https://geocoding.geo.census.gov/geocoder/geographies/coordinates?x=",lon,"&y=",lat,"&benchmark=4&vintage=4"))
tractvec[i] <- html_node(latlon,"#pl_gov_census_geo_geocoder_domain_GeographyResult") %>% html_children() %>% extract(5) %>% html_text() %>%
str_extract("(?<=TRACT\\: )\\d+")
if(i %% 1000==0){
write.csv(as.data.frame(tractvec), paste0("tractvec", toString(i), ".csv"))
cat(i, "\n")
}
}
View(latlonhead)
