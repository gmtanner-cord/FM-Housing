FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Exterior") %>% select("Index", V2)) %>% rename("Exterior"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="New Construction") %>% select("Index", V3)) %>% rename("New Construction Type"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Roof") %>% select("Index", V2)) %>% rename("Roof"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Water Heater") %>% select("Index", V2)) %>% rename("Water Heater"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Kitchen Island") %>% select("Index", V3)) %>% rename("Kitchen Island"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Patio") %>% select("Index", V3)) %>% rename("Patio"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Wood Deck"|V2=="Maint. Free Deck") %>% select("Index", V2)) %>% rename("Deck"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Fenced Partial"|V2=="Fenced Full") %>% select("Index", V2)) %>% rename("Fence"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pool") %>% select("Index", V3)) %>% rename("Pool"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Spa/Hot Tub") %>% select("Index", V3)) %>% rename("Spa/Hot Tub"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Sprinkler System") %>% select("Index", V3)) %>% rename("Sprinkler System"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Gazebo") %>% select("Index", V3)) %>% rename("Gazebo"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Dock") %>% select("Index", V3)) %>% rename("Dock"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pantry") %>% select("Index", V3)) %>% rename("Pantry"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Walk-in Closet") %>% select("Index", V3)) %>% rename("Walk-in Closet"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Private Bath") %>% select("Index", V3)) %>% rename("Private Bath"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% replace_na(list(
"Air Conditioning"="None",
"Foundation"="Other",
"Exterior"="Other",
"New Construction Type"="No",
"Roof"="Other",
"Water Heater"="Other",
"Kitchen Island"="No",
"Patio"="No",
"Deck"="None",
"Fence"="None",
"Pool"="No",
"Sprinkler System"="No",
"Gazebo"="No",
"Dock"="No",
"Pantry"="No",
"Walk-in Closet"="No",
"Private Bath"="No",
"Spa/Hot Tub"="No"
))
FM_Housing_Clean <- droplevels(FM_Housing_Clean)
FM_Agg_Monthly <- FM_Labor_Raw %>% mutate(Period=as.Date(paste(Year, Period, "01", sep="-"), "%Y-%b-%d"))
FM_Agg_Monthly <- left_join(FM_Agg_Monthly, FM_Income_Raw)
FM_Agg_Monthly <- FM_Agg_Monthly %>% select(-c(Year, employment, unemployment)) %>% mutate_at(vars(`labor force`,`unemployment rate`), parse_number)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate <= `Pended Date`)))
}
getHousesSoldMonthly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getHousesSoldYearly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - years(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getMedianMarketPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate - months(1) <= `Pended Date`) %>% pull(`List Price`) %>% median())
}
getMedianSoldPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sold Price`) %>% median())
}
getMedianSaleToListMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sale to List Ratio`) %>% mean())
}
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses on Market" = if_else(`Period` >= as.Date("2001-01-01"), getHousesOnMarket(Period), as.integer(500)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses Sold in Period" = if_else(`Period` >= as.Date("2001-01-01"), getHousesSoldMonthly(Period), as.integer(200)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Sales Rate over past Year" = if_else(`Period` >= as.Date("2002-01-01"), getHousesSoldYearly(Period)/12, 200))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Months Remaining Inventory" = `Houses on Market` / `Houses Sold in Period`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Seasonally-corrected MRI" = `Houses on Market` / `Sales Rate over past Year`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Market Price in Period" = getMedianMarketPriceMonthly(Period))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Sold Price in Period" = if_else(`Period` >= as.Date("2001-01-01"), getMedianSoldPriceMonthly(Period), 100000))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Monthly Payment on Median Home Sold in Period"=`Median Sold Price in Period`*.8*(0.01*`Effective Interest Rate`/12)/(1-(1/(1+0.01*`Effective Interest Rate`/12)^360)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Qualifying Income for Median Home Sold in Period"=`Monthly Payment on Median Home Sold in Period`*4*12)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Affordability Index"=(`Median Income`/`Qualifying Income for Median Home Sold in Period`)*100)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Unemployment-adjusted Affordability Index"=`Affordability Index`*(1-0.01*`unemployment rate`))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(FM_Agg_Monthly, by=c("List Period"="Period"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Air Conditioning"=if_else(`Air Conditioning`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("New Construction"=if_else(`New Construction Type`=="No", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise %>% mutate("Style Group"=switch(`Style`,
"1 Story" = "1 Story",
"1 1/2 Stor" = "1.5 Story",
"2 Story" = "2+ Story",
"3 Story" = "2+ Story",
"3 Level" = "Split Level",
"4 Level" = "Split Level",
"Bi Level" = "Bi-Level",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Roof Group"=if_else(`Roof` %in% c("Shingle", "Architectural Shingle"), as.character(`Roof`), "Other"))
FM_Housing_Clean <- FM_Housing_Clean %>%  mutate("Book Section Group"=switch(`Book Section`,
"Lake Property"="Single Family Residence",
"Condominium" = "Condominium",
"Single Family Residence" = "Single Family Residence",
"Townhouse" = "Townhouse/Twinhome",
"Twinhomes" = "Townhouse/Twinhome",
"Duplex"="Duplex",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Water Heater Group"=if_else(`Water Heater`=="Gas", "Gas", "Electric/Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Fence"=if_else(`Fence`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Deck"=if_else(`Deck`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Real Sold Price"=`Sold Price`*261.560/`CPI`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log Price"=log(`Sold Price`)) %>% filter(`Sold Price`>0)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log SqFt"=log(`Total SqFt.`))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Foundation Group"=switch(`Foundation`,
"Block"="Basement",
"Brick/Mortar"="Basement",
"Crawl Space"="Crawl Space",
"Other"="Other",
"Partial"="Other",
"Poured"="Poured",
"Slab on Grade"="Slab/Wood",
"Wood"="Slab/Wood",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Exterior Group"=switch(`Exterior`,
"Brick"="Brick/Vinyl",
"Hard Board"="Hardboard",
"Metal Siding"="Metal",
"Other"="Wood/Other",
"Shingle/Shake"="Other",
"Stone"="Stone/Stucco",
"Stucco"="Stone/Stucco",
"Vinyl Siding"="Brick/Vinyl",
"Wood Siding"="Wood/Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% add_count(`Census Tract`, name="Sales in Tract")
List_Inflation <- lm(`Sold Price` ~poly(as.numeric(`Start Date`), 3), data=FM_Housing_Clean)
FM_Housing_Clean$`Price Index`<- 100*predict(List_Inflation)/269563.3
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Adjusted Price"=`Sold Price`*100/`Price Index`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Days Since Listing"=interval(`Start Date`, as.Date("2021-07-07")) %>% as.duration() %>% as.numeric("days"))
FM_Tract_Clean_v1 <- FM_Housing_Raw_v1 %>% filter(!is.na(`Geo Lat`) & !is.na(`Geo Lon`)) %>% cbind("Census Tract"=FM_Tract_Raw_v1$tractvec) %>% select(c(`Geo Lat`, `Geo Lon`, `Census Tract`)) %>% distinct(.keep_all=TRUE)
FM_Housing_Clean_v2 <- FM_Housing_Raw_v2 %>% filter(!is.na(`Geo Lat`) & !is.na(`Geo Lon`)) %>% left_join(FM_Tract_Clean_v1)
FM_Housing_Clean_v2_Distinct <- FM_Housing_Clean_v2 %>% filter(is.na(`Census Tract`))
FM_Tract_Clean_v2 <- FM_Housing_Clean_v2_Distinct %>% select(c(`Geo Lat`, `Geo Lon`)) %>% cbind("Census Tract"=FM_Tract_Raw_v2$tractvec) %>% select(c(`Geo Lat`, `Geo Lon`, `Census Tract`)) %>% distinct(.keep_all=TRUE)
FM_Tract_Clean <- rbind(FM_Tract_Clean_v1, FM_Tract_Clean_v2) %>% distinct(.keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Raw_v2 %>% filter(!is.na(`Geo Lat`) & !is.na(`Geo Lon`)) %>% left_join(FM_Tract_Clean)
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean$`Total SqFt.`[FM_Housing_Clean$`Total SqFt.` < 150] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Period" = floor_date(`Start Date`, "month"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Building Age" = as.integer(format(`Start Date`, "%Y")) - `Year Built`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Total Bathrooms"=if_else(`Total Bathrooms`==34, 0.75, `Total Bathrooms`))
FM_Housing_Clean <- FM_Housing_Clean %>% filter(`List Price`!=1000)
FM_Housing_Clean <- FM_Housing_Clean %>% filter(`Sold Price`>1000)
Features <- str_match_all(FM_Housing_Clean$Features, "([^\\|]*)\\|([^\\|]*)\\|([^;]*);")
for(i in 1:length(Features)) {
Features[[i]] <- Features[[i]][,2:4] %>% cbind(i)
}
Features_Clean <- as.data.frame(do.call(rbind, Features)) %>% rename("Index" = i)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Index"=factor(1:nrow(FM_Housing_Clean)))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Air Conditioning") %>% select("Index", V2)) %>% rename("Air Conditioning"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Foundation") %>% select("Index", V2)) %>% rename("Foundation"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Exterior") %>% select("Index", V2)) %>% rename("Exterior"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="New Construction") %>% select("Index", V3)) %>% rename("New Construction Type"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Roof") %>% select("Index", V2)) %>% rename("Roof"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V1=="Water Heater") %>% select("Index", V2)) %>% rename("Water Heater"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Kitchen Island") %>% select("Index", V3)) %>% rename("Kitchen Island"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Patio") %>% select("Index", V3)) %>% rename("Patio"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Wood Deck"|V2=="Maint. Free Deck") %>% select("Index", V2)) %>% rename("Deck"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Fenced Partial"|V2=="Fenced Full") %>% select("Index", V2)) %>% rename("Fence"=V2) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pool") %>% select("Index", V3)) %>% rename("Pool"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Spa/Hot Tub") %>% select("Index", V3)) %>% rename("Spa/Hot Tub"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Sprinkler System") %>% select("Index", V3)) %>% rename("Sprinkler System"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Gazebo") %>% select("Index", V3)) %>% rename("Gazebo"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Dock") %>% select("Index", V3)) %>% rename("Dock"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Pantry") %>% select("Index", V3)) %>% rename("Pantry"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Walk-in Closet") %>% select("Index", V3)) %>% rename("Walk-in Closet"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(Features_Clean %>% filter(V2=="Private Bath") %>% select("Index", V3)) %>% rename("Private Bath"=V3) %>% distinct(Index, .keep_all=TRUE)
FM_Housing_Clean <- FM_Housing_Clean %>% replace_na(list(
"Air Conditioning"="None",
"Foundation"="Other",
"Exterior"="Other",
"New Construction Type"="No",
"Roof"="Other",
"Water Heater"="Other",
"Kitchen Island"="No",
"Patio"="No",
"Deck"="None",
"Fence"="None",
"Pool"="No",
"Sprinkler System"="No",
"Gazebo"="No",
"Dock"="No",
"Pantry"="No",
"Walk-in Closet"="No",
"Private Bath"="No",
"Spa/Hot Tub"="No"
))
FM_Housing_Clean <- droplevels(FM_Housing_Clean)
FM_Agg_Monthly <- FM_Labor_Raw %>% mutate(Period=as.Date(paste(Year, Period, "01", sep="-"), "%Y-%b-%d"))
FM_Agg_Monthly <- left_join(FM_Agg_Monthly, FM_Income_Raw)
FM_Agg_Monthly <- FM_Agg_Monthly %>% select(-c(Year, employment, unemployment)) %>% mutate_at(vars(`labor force`,`unemployment rate`), parse_number)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate <= `Pended Date`)))
}
getHousesSoldMonthly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getHousesSoldYearly <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(currentDate - years(1) <= `Pended Date`, `Pended Date` <= currentDate)))
}
getMedianMarketPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(`Start Date` <= currentDate, currentDate - months(1) <= `Pended Date`) %>% pull(`List Price`) %>% median())
}
getMedianSoldPriceMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sold Price`) %>% median())
}
getMedianSaleToListMonthly <- function(currentDate) {
return(FM_Housing_Clean %>% filter(currentDate - months(1) <= `Pended Date`, `Pended Date` <= currentDate) %>% pull(`Sale to List Ratio`) %>% mean())
}
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses on Market" = if_else(`Period` >= as.Date("2001-01-01"), getHousesOnMarket(Period), as.integer(500)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Houses Sold in Period" = if_else(`Period` >= as.Date("2001-01-01"), getHousesSoldMonthly(Period), as.integer(200)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Sales Rate over past Year" = if_else(`Period` >= as.Date("2002-01-01"), getHousesSoldYearly(Period)/12, 200))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Months Remaining Inventory" = `Houses on Market` / `Houses Sold in Period`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Seasonally-corrected MRI" = `Houses on Market` / `Sales Rate over past Year`)
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Market Price in Period" = getMedianMarketPriceMonthly(Period))
FM_Agg_Monthly <- FM_Agg_Monthly %>% rowwise %>% mutate("Median Sold Price in Period" = if_else(`Period` >= as.Date("2001-01-01"), getMedianSoldPriceMonthly(Period), 100000))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Monthly Payment on Median Home Sold in Period"=`Median Sold Price in Period`*.8*(0.01*`Effective Interest Rate`/12)/(1-(1/(1+0.01*`Effective Interest Rate`/12)^360)))
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Qualifying Income for Median Home Sold in Period"=`Monthly Payment on Median Home Sold in Period`*4*12)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Affordability Index"=(`Median Income`/`Qualifying Income for Median Home Sold in Period`)*100)
FM_Agg_Monthly <- FM_Agg_Monthly %>% mutate("Unemployment-adjusted Affordability Index"=`Affordability Index`*(1-0.01*`unemployment rate`))
FM_Housing_Clean <- FM_Housing_Clean %>% left_join(FM_Agg_Monthly, by=c("List Period"="Period"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Air Conditioning"=if_else(`Air Conditioning`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("New Construction"=if_else(`New Construction Type`=="No", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise %>% mutate("Style Group"=switch(`Style`,
"1 Story" = "1 Story",
"1 1/2 Stor" = "1.5 Story",
"2 Story" = "2+ Story",
"3 Story" = "2+ Story",
"3 Level" = "Split Level",
"4 Level" = "Split Level",
"Bi Level" = "Bi-Level",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Roof Group"=if_else(`Roof` %in% c("Shingle", "Architectural Shingle"), as.character(`Roof`), "Other"))
FM_Housing_Clean <- FM_Housing_Clean %>%  mutate("Book Section Group"=switch(`Book Section`,
"Lake Property"="Single Family Residence",
"Condominium" = "Condominium",
"Single Family Residence" = "Single Family Residence",
"Townhouse" = "Townhouse/Twinhome",
"Twinhomes" = "Townhouse/Twinhome",
"Duplex"="Duplex",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Water Heater Group"=if_else(`Water Heater`=="Gas", "Gas", "Electric/Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Fence"=if_else(`Fence`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Has Deck"=if_else(`Deck`=="None", "No", "Yes"))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Real Sold Price"=`Sold Price`*261.560/`CPI`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log Price"=log(`Sold Price`)) %>% filter(`Sold Price`>0)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log SqFt"=log(`Total SqFt.`))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Foundation Group"=switch(`Foundation`,
"Block"="Basement",
"Brick/Mortar"="Basement",
"Crawl Space"="Crawl Space",
"Other"="Other",
"Partial"="Other",
"Poured"="Poured",
"Slab on Grade"="Slab/Wood",
"Wood"="Slab/Wood",
NA))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Exterior Group"=switch(`Exterior`,
"Brick"="Brick/Vinyl",
"Hard Board"="Hardboard",
"Metal Siding"="Metal",
"Other"="Wood/Other",
"Shingle/Shake"="Other",
"Stone"="Stone/Stucco",
"Stucco"="Stone/Stucco",
"Vinyl Siding"="Brick/Vinyl",
"Wood Siding"="Wood/Other"))
FM_Housing_Clean <- FM_Housing_Clean %>% add_count(`Census Tract`, name="Sales in Tract")
List_Inflation <- lm(`Sold Price` ~poly(as.numeric(`Start Date`), 3), data=FM_Housing_Clean)
FM_Housing_Clean$`Price Index`<- 100*predict(List_Inflation)/269563.3
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Adjusted Price"=`Sold Price`*100/`Price Index`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Days Since Listing"=interval(`Start Date`, as.Date("2021-07-07")) %>% as.duration() %>% as.numeric("days"))
FM_Housing_Clean[54773,27] <- "12"
FM_Housing_Clean[54767,27] <- "10"
FM_Housing_Clean$`Street Address` <- apply(FM_Housing_Clean[, c("Address #", "Street Name", "Street Suffix", "Street Direction Sfx", "Unit #", "City", "State/Province", "Postal Code")], 1,
function(i){ paste(na.omit(i), collapse = " ") })
FM_Housing_Clean %>% write_csv("../Data/FM_Housing_Clean.csv.gz")
FM_Agg_Monthly %>% write_csv("../Data/FM_Agg_Monthly.csv")
FM_Tract_Clean %>% write_csv("../Data/FM_Tract_Clean.csv")
library(tidyverse)
library(lme4)
library(caret)
library(lubridate)
FM_Housing_Clean <- read_csv("../Data/FM_Housing_Clean.csv.gz", col_types = cols(
`Lease Term` = col_character(),
`Water Frontage Length` = col_integer(),
`Postal Code` = col_character(),
`Address #` = col_character(),
`Occupant Phone 2` = col_character(),
`Finance` = col_character(),
`Sheyenne Unpd` = col_character()
))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=`Days Since Listing`^(-2))
n <- 5
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
scaling <- preProcess(FM_Housing_Train %>% select(`Log Price`, `Log SqFt`, `Total Bedrooms`, `Total Bathrooms`), method=c("YeoJohnson", "center", "scale"))
trainScaled <- scaling %>% predict(FM_Housing_Train)
testScaled <- scaling %>% predict(FM_Housing_Test)
testScaled_recent <- testScaled %>% filter(`Pended Date` >= as.Date("2021-01-01") )
trainingModel <- lmer(`Log Price`~
`Log SqFt`+
`Year Built`+
`Building Age`+
#`Seasonally-corrected MRI`+
#`Unemployment-adjusted Affordability Index`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
#`Dock`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation Group`+
`Book Section Group`+
`Exterior`+
(1+`Log SqFt`|`Census Tract`), data=trainScaled, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=testScaled, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=testScaled_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, testScaled$`Log Price`)[2]
resamples_recent[i] <- postResample(testedModel_recent, testScaled_recent$`Log Price`)[2]
print(i)
}
summary(trainingModel)
paste("Full range: ", mean(resamples), " (", sd(resamples), ")", sep="")
paste("2021 only: ", mean(resamples_recent), " (", sd(resamples_recent), ")", sep="")
ggplot() + geom_point(aes(predict(trainingModel), resid(trainingModel)), alpha=0.1) + geom_hline(yintercept=0, color="blue")
hedonic_prediction <- predict(trainingModel, newdata=New_Data_Clean, allow.new.levels=TRUE)
FM_Agg_Monthly <- read_csv("../Data/FM_Agg_Monthly.csv")
FM_Tract_Clean <- read_csv("../Data/FM_Tract_Clean.csv")
New_Data <- read_csv("../Data/FM_On_Market_2021_07_06.csv")
New_Data_Clean <- New_Data %>% select(-c("Property Type", "Card Format", "List Number", "Directions"))
New_Data_Clean <- New_Data_Clean %>% mutate("List Period" = floor_date(Sys.Date(), "month"))
New_Data_Clean <- New_Data_Clean %>% mutate("Building Age" = as.integer(format(`Start Date`, "%Y")) - `Year Built`)
Features <- str_match_all(FM_Housing_Clean$Features, "([^\\|]*)\\|([^\\|]*)\\|([^;]*);")
for(i in 1:length(Features)) {
Features[[i]] <- Features[[i]][,2:4] %>% cbind(i)
}
Features_Clean <- as.data.frame(do.call(rbind, Features)) %>% rename("Index" = i)
New_Data_Clean <- New_Data_Clean %>% mutate("Index"=factor(1:nrow(New_Data_Clean)))
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V1=="Air Conditioning") %>% select("Index", V2)) %>% rename("Air Conditioning"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V1=="Foundation") %>% select("Index", V2)) %>% rename("Foundation"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V1=="Exterior") %>% select("Index", V2)) %>% rename("Exterior"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="New Construction") %>% select("Index", V3)) %>% rename("New Construction Type"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V1=="Roof") %>% select("Index", V2)) %>% rename("Roof"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V1=="Water Heater") %>% select("Index", V2)) %>% rename("Water Heater"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Kitchen Island") %>% select("Index", V3)) %>% rename("Kitchen Island"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Patio") %>% select("Index", V3)) %>% rename("Patio"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Wood Deck"|V2=="Maint. Free Deck") %>% select("Index", V2)) %>% rename("Deck"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Fenced Partial"|V2=="Fenced Full") %>% select("Index", V2)) %>% rename("Fence"=V2) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Pool") %>% select("Index", V3)) %>% rename("Pool"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Spa/Hot Tub") %>% select("Index", V3)) %>% rename("Spa/Hot Tub"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Sprinkler System") %>% select("Index", V3)) %>% rename("Sprinkler System"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Gazebo") %>% select("Index", V3)) %>% rename("Gazebo"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Dock") %>% select("Index", V3)) %>% rename("Dock"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Pantry") %>% select("Index", V3)) %>% rename("Pantry"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Walk-in Closet") %>% select("Index", V3)) %>% rename("Walk-in Closet"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% left_join(Features_Clean %>% filter(V2=="Private Bath") %>% select("Index", V3)) %>% rename("Private Bath"=V3) %>% distinct(Index, .keep_all=TRUE)
New_Data_Clean <- New_Data_Clean %>% replace_na(list(
"Air Conditioning"="None",
"Foundation"="Other",
"Exterior"="Other",
"New Construction Type"="No",
"Roof"="Other",
"Water Heater"="Other",
"Kitchen Island"="No",
"Patio"="No",
"Deck"="None",
"Fence"="None",
"Pool"="No",
"Sprinkler System"="No",
"Gazebo"="No",
"Dock"="No",
"Pantry"="No",
"Walk-in Closet"="No",
"Private Bath"="No",
"Spa/Hot Tub"="No"
))
New_Data_Clean <- droplevels(New_Data_Clean)
###AGGREGATED PROCESSING HERE###
New_Data_Clean <- New_Data_Clean %>% mutate("Has Air Conditioning"=if_else(`Air Conditioning`=="None", "No", "Yes"))
New_Data_Clean <- New_Data_Clean %>% mutate("New Construction"=if_else(`New Construction Type`=="No", "No", "Yes"))
New_Data_Clean <- New_Data_Clean %>% rowwise %>% mutate("Style Group"=switch(`Style`,
"1 Story" = "1 Story",
"1 1/2 Stor" = "1.5 Story",
"2 Story" = "2+ Story",
"3 Story" = "2+ Story",
"3 Level" = "Split Level",
"4 Level" = "Split Level",
"Bi Level" = "Bi-Level",
"Other"))
New_Data_Clean <- New_Data_Clean %>% mutate("Roof Group"=if_else(`Roof` %in% c("Shingle", "Architectural Shingle"), as.character(`Roof`), "Other"))
New_Data_Clean <- New_Data_Clean %>%  mutate("Book Section Group"=switch(`Book Section`,
"Lake Property"="Single Family Residence",
"Condominium" = "Condominium",
"Single Family Residence" = "Single Family Residence",
"Townhouse" = "Townhouse/Twinhome",
"Twinhomes" = "Townhouse/Twinhome",
"Other"))
New_Data_Clean <- New_Data_Clean %>% mutate("Water Heater Group"=if_else(`Water Heater`=="Gas", "Gas", "Electric/Other"))
New_Data_Clean <- New_Data_Clean %>% mutate("Has Fence"=if_else(`Fence`=="None", "No", "Yes"))
New_Data_Clean <- New_Data_Clean %>% mutate("Has Deck"=if_else(`Deck`=="None", "No", "Yes"))
New_Data_Clean <- New_Data_Clean %>% mutate("Log SqFt"=log(`Total SqFt.`))
New_Data_Clean <- New_Data_Clean %>% mutate("Foundation Group"=switch(`Foundation`,
"Block"="Basement",
"Brick/Mortar"="Basement",
"Crawl Space"="Crawl Space",
"Other"="Other",
"Partial"="Other",
"Poured"="Poured",
"Slab on Grade"="Slab/Wood",
"Wood"="Slab/Wood",
"Other"))
New_Data_Clean <- New_Data_Clean %>% left_join(FM_Tract_Clean)
New_Data_Clean$`Hedonic Prediction` <- predict(trainingModel, newdata=New_Data_Clean, allow.new.levels=TRUE)
New_Data_Clean <- New_Data_Clean %>%  mutate("Book Section Group"=switch(`Book Section`,
"Lake Property"="Single Family Residence",
"Condominium" = "Condominium",
"Single Family Residence" = "Single Family Residence",
"Townhouse" = "Townhouse/Twinhome",
"Twinhomes" = "Townhouse/Twinhome",
"Duplex"="Duplex",
"Other"))
New_Data_Clean$`Hedonic Prediction` <- predict(trainingModel, newdata=New_Data_Clean, allow.new.levels=TRUE)
View(New_Data_Clean)
FM_Housing_Clean <- FM_Housing-Clean %>% mutate("Log List Price"=log(`List Price`))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log List Price"=log(`List Price`))
New_Data_Clean <- New_Data_Clean %>% mutate("Log List Price"=log(`List Price`))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=`Days Since Listing`^(-2))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log List Price"=log(`List Price`))
n <- 5
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
scaling <- preProcess(FM_Housing_Train %>% select(`Log Price`, `Log SqFt`, `Total Bedrooms`, `Total Bathrooms`), method=c("YeoJohnson", "center", "scale"))
trainScaled <- scaling %>% predict(FM_Housing_Train)
testScaled <- scaling %>% predict(FM_Housing_Test)
testScaled_recent <- testScaled %>% filter(`Pended Date` >= as.Date("2021-01-01") )
trainingModel <- lmer(`Log Price`~
`Log List Price`
`Log SqFt`+
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Model Weight"=`Days Since Listing`^(-2))
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Log List Price"=log(`List Price`))
n <- 5
resamples <- vector(length=n)
resamples_recent <- vector(length=n)
trainIndex <- createFolds(FM_Housing_Clean$`Log Price`, k=n, list=TRUE, returnTrain=TRUE)
for(i in 1:n) {
FM_Housing_Train <- FM_Housing_Clean[trainIndex[[i]],]
FM_Housing_Test <- FM_Housing_Clean[-trainIndex[[i]],]
scaling <- preProcess(FM_Housing_Train %>% select(`Log Price`, `Log SqFt`, `Total Bedrooms`, `Total Bathrooms`), method=c("YeoJohnson", "center", "scale"))
trainScaled <- scaling %>% predict(FM_Housing_Train)
testScaled <- scaling %>% predict(FM_Housing_Test)
testScaled_recent <- testScaled %>% filter(`Pended Date` >= as.Date("2021-01-01") )
trainingModel <- lmer(`Log Price`~
`Log List Price`+
`Log SqFt`+
`Year Built`+
`Building Age`+
#`Seasonally-corrected MRI`+
#`Unemployment-adjusted Affordability Index`+
`Total Bedrooms`+
`Total Bathrooms`+
`Garage Stalls`+
`Has Air Conditioning`+
`New Construction`+
`Style Group`+
`Roof Group`+
`Water Heater Group`+
`Kitchen Island`+
`Patio`+
`Has Deck`+
`Has Fence`+
`Sprinkler System`+
`Gazebo`+
#`Dock`+
`Pool`+
`Pantry`+
`Walk-in Closet`+
`Private Bath`+
`Spa/Hot Tub`+
`Foundation Group`+
`Book Section Group`+
`Exterior`+
(1+`Log SqFt`|`Census Tract`), data=trainScaled, weights=`Model Weight`, REML=FALSE, control=lmerControl(calc.derivs=FALSE))
testedModel <- predict(trainingModel, newdata=testScaled, allow.new.levels=TRUE)
testedModel_recent <- predict(trainingModel, newdata=testScaled_recent, allow.new.levels=TRUE)
resamples[i] <- postResample(testedModel, testScaled$`Log Price`)[2]
resamples_recent[i] <- postResample(testedModel_recent, testScaled_recent$`Log Price`)[2]
print(i)
}
summary(trainingModel)
paste("Full range: ", mean(resamples), " (", sd(resamples), ")", sep="")
paste("2021 only: ", mean(resamples_recent), " (", sd(resamples_recent), ")", sep="")
ggplot() + geom_point(aes(predict(trainingModel), resid(trainingModel)), alpha=0.1) + geom_hline(yintercept=0, color="blue")
New_Data_Clean <- New_Data_Clean %>% mutate("Log List Price"=log(`List Price`))
New_Data_Clean$`Prediction from Listing` <- predict(trainingModel, newdata=New_Data_Clean, allow.new.levels=TRUE)
View(New_Data_Clean)
New_Data_Clean %>% write_csv("../Data/Houses_On_Market_Processed.csv")
