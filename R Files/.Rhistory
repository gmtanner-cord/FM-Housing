currentHousesOnMarket <- FM_Housing_Clean %>% filter(`Start Date` < currentDate)
return(nrow(currentHousesOnMarket))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2010-01-01"), as.Date("2010-12-31"), by="days"))
Houses_On_Market <- Houses_On_Market %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
currentHousesOnMarket <- FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)
return(nrow(currentHousesOnMarket))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2010-01-01"), as.Date("2010-12-31"), by="days"))
Houses_On_Market <- Houses_On_Market %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
currentHousesOnMarket <- FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)
return(nrow(currentHousesOnMarket))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2010-01-01"), as.Date("2010-12-31"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise() %>% mutate("Houses on Market at Start Date" = gtHousesOnMarket(`Start Date`))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise() %>% mutate("Houses on Market at Start Date" = getHousesOnMarket(`Start Date`))
View(FM_Housing_Clean)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
#FM_Housing_Clean <- FM_Housing_Clean %>% rowwise() %>% mutate("Houses on Market at Start Date" = getHousesOnMarket(`Start Date`))
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-12-31"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(maps)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(maps)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
FM_Housing_Clean <- FM_Housing_Clean %>% rowwise() %>% mutate("Houses on Market at Start Date" = getHousesOnMarket(`Start Date`))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-12-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-01-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
Houses_On_Market
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c(`Start Date`, `Date`))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date", "Date"))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(maps)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`Original List Price`), binwidth=10000)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`List Price`), binwidth=10000)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`Sold Price`), binwidth=10000)
median(na.omit(FM_Housing_Clean$`Original List Price`))
median(FM_Housing_Clean$`List Price`)
median(FM_Housing_Clean$`Sold Price`)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`List Price Change`), binwidth=10000)
ggplot(data=FM_Housing_Clean[which(FM_Housing_Clean$`List Price Change`!=0),]) + geom_histogram(mapping=aes(x=`List Price Change`), binwidth=10000)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`Sold/List Price Difference`), binwidth=10000)
ggplot(data=FM_Housing_Clean) + geom_histogram(mapping=aes(x=`Sold/Original List Price Difference`), binwidth=10000)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(y=`Sold/Original List Price Difference`, x=`Days on Market`), alpha=0.1) + xlim(0, 1250) + ylim(-200000, 200000)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`Days on Market`, y=`List Price Change`), alpha=0.1)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`Original List Price`, y=`List Price Change`), alpha=0.1)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`List Price`, y=`List Price Change`), alpha=0.1)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`Original List Price`, y=`Days on Market`), alpha=0.1)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`List Price`, y=`Days on Market`), alpha=0.1)
ggplot(data=FM_Housing_Clean) + geom_point(mapping=aes(x=`Sold Price`, y=`Days on Market`), alpha=0.1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(maps)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="months"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
View(Houses_On_Market)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
View(Houses_On_Market)
View(FM_Housing_Clean)
View(FM_Housing_Raw)
View(FM_Housing_Clean)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
setDT(FM_Housing_Clean)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
View(FM_Housing_Clean)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean$`Houses on Market at Start` <- right_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
View(FM_Housing_Clean)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(maps)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
ggplot() + geom_point(data=FM_Housing_Clean[which(FM_Housing_Clean$`Sold Price` <= 500000),], mapping=aes(x=`Geo Lon`, y=`Geo Lat`, color=`Sold Price`)) + scale_color_gradient(low="yellow",high="red") + geom_point(data=FM_Housing_Clean[which(FM_Housing_Clean$`Sold Price` > 500000),], mapping=aes(x=`Geo Lon`, y=`Geo Lat`), size=0.5) + coord_sf(ylim = c(46.75, 46.95), xlim=c(-96.95, -96.7))
ggplot() + geom_point(data=FM_Housing_Clean[which(FM_Housing_Clean$`Sold Price` <= 500000),], mapping=aes(x=`Geo Lon`, y=`Geo Lat`, color=`Sold Price`)) + scale_color_gradient(low="yellow",high="red") + geom_point(data=FM_Housing_Clean[which(FM_Housing_Clean$`Sold Price` > 500000),], mapping=aes(x=`Geo Lon`, y=`Geo Lat`), size=0.5) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Start Date" = "Date"))
View(FM_Housing_Clean)
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Pending Date" = "Date"))
getHousesOnMarket <- function(currentDate) {
return(nrow(FM_Housing_Clean %>% filter(`Start Date` <= currentDate & `Pended Date` >= currentDate)))
}
Houses_On_Market <- data.frame("Date"=seq(as.Date("2001-05-01"), as.Date("2021-03-01"), by="days"))
Houses_On_Market <- Houses_On_Market %>% rowwise() %>% mutate("Houses on Market" = getHousesOnMarket(Date))
FM_Housing_Clean <- left_join(FM_Housing_Clean, Houses_On_Market, by=c("Pended Date" = "Date"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
View(FM_Housing_Clean)
getHousesOnMarket <- function(rowNumber, milesRadius, usePended) {
if (usePended) {
thisDate <- FM_Housing_Clean[rowNumber,]$`Pended Date`
} else {
thisDate <- FM_Housing_Clean[rowNumber,]$`Start Date`
}
Global_Market <- FM_Housing_Clean %>% filter(
`Start Date` <= thisDate &
`Pended Date` >= thisDate
)
thisLon <- FM_Housing_Clean[rowNumber,]$`Geo Lon`
thisLat <- FM_Housing_Clean[rowNumber,]$`Geo Lat`
Local_Market <- Global_Market %>% filter(
`Geo Lon` >= thisLon-.0185*milesRadius &
`Geo Lon` <= thisLon+.0185*milesRadius &
`Geo Lat` >= thisLat-.0145*milesRadius &
`Geo Lat` <= thisLat+.0145*milesRadius
)
return(c(nrow(Global_Market),nrow(Local_Market)))
}
Markets_List <- c()
for(n in 1:nrow(FM_Housing_Clean)) {
Markets_List[n,] <- getHousesOnMarket(n, 1, FALSE)
}
getHousesOnMarket <- function(rowNumber, milesRadius, usePended) {
if (usePended) {
thisDate <- FM_Housing_Clean[rowNumber,]$`Pended Date`
} else {
thisDate <- FM_Housing_Clean[rowNumber,]$`Start Date`
}
Global_Market <- FM_Housing_Clean %>% filter(
`Start Date` <= thisDate &
`Pended Date` >= thisDate
)
thisLon <- FM_Housing_Clean[rowNumber,]$`Geo Lon`
thisLat <- FM_Housing_Clean[rowNumber,]$`Geo Lat`
Local_Market <- Global_Market %>% filter(
`Geo Lon` >= thisLon-.0185*milesRadius &
`Geo Lon` <= thisLon+.0185*milesRadius &
`Geo Lat` >= thisLat-.0145*milesRadius &
`Geo Lat` <= thisLat+.0145*milesRadius
)
return(c(nrow(Global_Market),nrow(Local_Market)))
}
Markets_List <- c()
for(n in 1:nrow(FM_Housing_Clean)) {
Markets_List[n] <- getHousesOnMarket(n, 1, FALSE)
}
FM_Housing_Clean <- FM_Housing_Clean %>% cbind(Markets_List)
FM_Housing_Clean <- FM_Housing_Clean %>% rename("Houses on Global Market at Start" = `1`, "Houses on Local Market at Start" = `2`)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(amap)
library(gtools)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_kmeans2 <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% select(logprice, milelong, milelat)
FM_Housing_kmeans2
# K-Means Cluster Analysis
#sum(is.na(FM_Housing_kmeans2))
#is.na(FM_Housing_kmeans2)
#apply(is.na(FM_Housing_kmeans2), 2, which)
#FM_Housing_kmeans2 <- na.omit(FM_Housing_kmeans2)
#FM_Housing_Clean_Omit <- FM_Housing_Clean %>% subset(FM_Housing_Clean, na.omit(select(logprice, milelong, milelat)))
#FM_Housing_Clean$`Geo Lon`[is.na(FM_Housing_Clean$`Geo Lon`)] <- mean(FM_Housing_Clean$`Geo Lon`,na.rm=TRUE)
#na.replace(FM_Housing_Clean$`Geo Lon`, mean(FM_Housing_Clean$`Geo Lon`))
#FM_Housing_Clean_Means <- na.replace(FM_Housing_Clean$`Geo Lat`, mean(FM_Housing_Clean$`Geo Lat`))
fit <- Kmeans(FM_Housing_kmeans2, 21, nstart = 2, method = "manhattan") # 21 cluster solution
# get cluster means
aggregate(FM_Housing_kmeans2,by=list(fit$cluster),FUN=mean)
# append cluster assignment
FM_Housing_kmeans2 <- data.frame(FM_Housing_kmeans2, fit$cluster)
fit
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=FM_Housing_Clean_Omit$`cluster`) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
View(FM_Housing_Clean_Omit)
library(amap)
detach("package:amap", unload = TRUE)
library(amap)
uninstall.packages(amap)
remove.packages(amap)
install.packages(amap)
"amap"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(amap)
library(gtools)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_kmeans2 <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% select(logprice, milelong, milelat)
FM_Housing_kmeans2
# K-Means Cluster Analysis
#sum(is.na(FM_Housing_kmeans2))
#is.na(FM_Housing_kmeans2)
#apply(is.na(FM_Housing_kmeans2), 2, which)
#FM_Housing_kmeans2 <- na.omit(FM_Housing_kmeans2)
#FM_Housing_Clean_Omit <- FM_Housing_Clean %>% subset(FM_Housing_Clean, na.omit(select(logprice, milelong, milelat)))
#FM_Housing_Clean$`Geo Lon`[is.na(FM_Housing_Clean$`Geo Lon`)] <- mean(FM_Housing_Clean$`Geo Lon`,na.rm=TRUE)
#na.replace(FM_Housing_Clean$`Geo Lon`, mean(FM_Housing_Clean$`Geo Lon`))
#FM_Housing_Clean_Means <- na.replace(FM_Housing_Clean$`Geo Lat`, mean(FM_Housing_Clean$`Geo Lat`))
fit <- Kmeans(FM_Housing_kmeans2, 21, nstart = 2, method = "manhattan") # 21 cluster solution
# get cluster means
aggregate(FM_Housing_kmeans2,by=list(fit$cluster),FUN=mean)
# append cluster assignment
FM_Housing_kmeans2 <- data.frame(FM_Housing_kmeans2, fit$cluster)
fit
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=FM_Housing_Clean_Omit$`cluster`) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
install.packages(amap)
install.packages("amap")
install.packages("amap")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(amap)
library(gtools)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_kmeans2 <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% select(logprice, milelong, milelat)
FM_Housing_kmeans2
# K-Means Cluster Analysis
#sum(is.na(FM_Housing_kmeans2))
#is.na(FM_Housing_kmeans2)
#apply(is.na(FM_Housing_kmeans2), 2, which)
#FM_Housing_kmeans2 <- na.omit(FM_Housing_kmeans2)
#FM_Housing_Clean_Omit <- FM_Housing_Clean %>% subset(FM_Housing_Clean, na.omit(select(logprice, milelong, milelat)))
#FM_Housing_Clean$`Geo Lon`[is.na(FM_Housing_Clean$`Geo Lon`)] <- mean(FM_Housing_Clean$`Geo Lon`,na.rm=TRUE)
#na.replace(FM_Housing_Clean$`Geo Lon`, mean(FM_Housing_Clean$`Geo Lon`))
#FM_Housing_Clean_Means <- na.replace(FM_Housing_Clean$`Geo Lat`, mean(FM_Housing_Clean$`Geo Lat`))
fit <- Kmeans(FM_Housing_kmeans2, 21, nstart = 2, method = "manhattan") # 21 cluster solution
# get cluster means
aggregate(FM_Housing_kmeans2,by=list(fit$cluster),FUN=mean)
# append cluster assignment
FM_Housing_kmeans2 <- data.frame(FM_Housing_kmeans2, fit$cluster)
fit
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=FM_Housing_Clean_Omit$`cluster`) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145)
fit <- FM_Housing_Clean_Omit %>% select(logprice, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
fit
View(fit)
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
View(FM_Housing_Clean_Omit)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=cluster) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=cluster) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=`cluster`) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145)
fit <- FM_Housing_Clean_Omit %>% select(logprice, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
View(FM_Housing_Clean_Omit)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=`cluster`) + scale_color_gradient(low="yellow",high="red") + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=cluster) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot() + geom_point(data=FM_Housing_Clean_Omit, mapping=aes(x=milelong, y=milelat), color=FM_Housing_Clean_Omit$cluster) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat), color=cluster) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat), color=cluster) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat))
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat), color=cluster)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat), color=`cluster`)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=milelong, y=milelat), color="cluster")
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`))
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`) + fill(cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`) + fill(`cluster`)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=FM_Housing_Clean_Omit$cluster) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=FM_Housing_Clean_Omit$`cluster`) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`), color=`cluster`) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + facet_wrap(~cluster)
+ ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145)
fit <- FM_Housing_Clean_Omit %>% select(logprice, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
fit <- FM_Housing_Clean_Omit %>% select(logprice, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan", iter.max=30) # 21 cluster solution
fit <- FM_Housing_Clean_Omit %>% select(logprice, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan", iter.max=100) # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(amap)
library(gtools)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(amap)
library(gtools)
FM_Housing_Raw <- read_csv(unz("../Data/FM_Housing_Raw.zip", "FM_Housing_Raw.csv"), col_types = cols(
`Lease Term` = col_character(),
`Directions` = col_character(),
`Water Frontage Length` = col_integer()
))
FM_Housing_Clean <- FM_Housing_Raw %>% select(-c("Property Type", "Card Format")) #All properties are Residential for both Property Type and Card Format variables
FM_Housing_Clean <- FM_Housing_Clean %>% select(-c("List Number", "Directions")) #Arbitrary values not useful for data mining
FM_Housing_Clean$`Year Built`[FM_Housing_Clean$`Year Built` < 1600 | FM_Housing_Clean$`Year Built` > 2021] <- NA
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("List Price Change":=`List Price`-`Original List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/List Price Difference":=`Sold Price` - `List Price`)
FM_Housing_Clean <- FM_Housing_Clean %>% mutate("Sold/Original List Price Difference":=`Sold Price` - `Original List Price`)
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145)
fit <- FM_Housing_Clean_Omit %>% select(`Total SqFt.`, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster)
fit <- FM_Housing_Clean_Omit %>% select(.0001(`Total SqFt.`), milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% mutate(logSqFt = log(`Total SqFt.`, base=1.1))
fit <- FM_Housing_Clean_Omit %>% select(logSqFt, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
# kmeans Clustering with three variables
FM_Housing_Clean_Omit <- FM_Housing_Clean %>% filter(!is.na(`Geo Lon`) & !is.na(`Geo Lat`) & !is.na(`Total SqFt.`))
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% mutate(logSqFt = log(`Total SqFt.`, base=1.1))
fit <- FM_Housing_Clean_Omit %>% select(logSqFt, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% mutate(logSqFt = log(`Total SqFt.`, base=1.1))
View(FM_Housing_Clean)
View(FM_Housing_Clean_Omit)
fit <- FM_Housing_Clean_Omit %>% select(milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster2" = `as.factor(fit$cluster)`)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`, colour=cluster2)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7)
ggplot(data=FM_Housing_Clean_Omit) + geom_point(mapping=aes(x=`Geo Lon`, y=`Geo Lat`)) + ylim(46.75, 46.95) + xlim(-96.95, -96.7) + facet_wrap(~cluster2)
fit <- FM_Housing_Clean_Omit %>% select(milelong, milelat, logSqFt) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% mutate(logprice = log(`Sold Price`, base = 1.1)) %>% mutate(milelong = (`Geo Lon`+97)/.0185) %>% mutate(milelat = (`Geo Lat` -46)/.0145) %>% mutate(logSqFt = log(`Total SqFt.`, base = 1.1))
fit <- FM_Housing_Clean_Omit %>% select(.0001(`Total SqFt.`, milelong, milelat) %>% Kmeans(21, nstart = 2, method = "manhattan") # 21 cluster solution
FM_Housing_Clean_Omit <- FM_Housing_Clean_Omit %>% cbind(as.factor(fit$cluster)) %>% rename("cluster" = `as.factor(fit$cluster)`)
